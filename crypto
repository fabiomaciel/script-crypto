#!/usr/bin/env node
'use strict';

const crypto = require('crypto');

//CHANGE THIS KEY
const PRIVATE_KEY = "private_key_string";

const ALG = "aes-128-ecb";

function getCipher(key){
     let cipher = crypto.createCipheriv(ALG, key || PRIVATE_KEY, '');
     return cipher;
}

function getDecipher(key){
    let cipher = crypto.createDecipheriv(ALG, key || PRIVATE_KEY, '');
    return cipher;
}

function urlEncode(encoded) {
    return encoded.replace(/\+/g, '-').replace(/\//g, '_')
}

function urlDecode(encoded) {
    return encoded.replace(/-/g, '+').replace(/_/g, '/');
}


function encrypt(message, key){
    let cipher = getCipher(key);
    let crypted = cipher.update(message,'utf8','base64');
    crypted += cipher.final('base64');
    return urlEncode(crypted);
}

function decrypt(data, key){
    var decipher = getDecipher(key);
    var dec = decipher.update(urlDecode(data),'base64','utf8');
    dec += decipher.final('utf8');
    return dec;
}

function print(){
    console.log(...arguments);
}

let params = process.argv.slice(2);

const predicate = x => x == '--decrypt' || x == '-d';
const predicateNegate = x => x !== '--decrypt' && x !== '-d';

if(params.some(predicate)){
    params = params.filter(predicateNegate);
    return print(decrypt(params[0], params[1]));
}

print(encrypt(params[0], params[1]));
